------create vendors table
CREATE TABLE vendors(
	VendorNumber INT,	
	VendorName	VARCHAR(100),
	VendorEmail VARCHAR(100)
)

-----create purchase table
CREATE TABLE purchase (
	InventoryId	VARCHAR(40),
	ProductID INT,
	ProductName	VARCHAR(50),
	Size VARCHar(10),
	VendorNumber INT,	
	PONumber INT,
	PODate	DATE,
	ReceivingDate DATE,
	InvoiceDate	DATE,
	PayDate	DATE,
	PurchasePrice  NUMERIC,
	Quantity	 NUMERIC,
	Classification INT
	);

------SELECt TOP 10 ROWS
SELECT *
FROM Vendors
LIMIT 10;

SELECT *
FROM purchase
LIMIT 10;

---count no OF VALUES
SELECT count(*)
FROM VENDORS;

----CHECK FOR NULL VALUES
SELECT *
FROM VENDORS 
WHERE vENDORNUMBER is null
or vendorname is null
or vendoremail is null;

-----check for dUPLICTAES
SELECT vendornumber, VEndorname, veNDoremail, COUNT(*)
FROM VENDOrs
GROUP BY  VENDORNUMBER, VENDORNAME , VENDORemail
having COUNT(*) >1;

SELECT vendornumber, COUNT(*)
FROM VENDOrs
GROUP BY  VENDORNUMBER
having COUNT(*) >1;

-----explore purchase table
select *
from purchase
limit 10;

----COUNT nuMbers Of rOWs
SELECT COUNT(*)
FROM PURCHAse;

---count numbers of unique prodUCTS
select count(distinct productid)
from purchase;

----COUNT NO OF UNIQUE VENDORS
SELECT COUNT(DISTINCT VENDORNUMBER)
FROM PURCHASE

---CHECK FOR NULL VALUES
SELECT *
FROM PURCHASE
	WHERE ProductName IS NULL
	OR size IS NULL
	OR VendorNumber IS NULL	
	OR PONumber IS NULL
    OR PODate IS NULL
	OR ReceivingDate IS NULL
	OR InvoiceDate	IS NULL
	OR PayDate	IS NULL
	OR PurchasePrice  IS NULL
	OR Quantity	 IS NULL
	OR Classification IS NULL;

	----CHECK FOR DUPLICATE ROWS VALUES
SELECT COUNT(*)
FROM PURCHASE 
GROUP BY INVENTORYID, PRODUCTID, PRODUCTNAME, size, VENDORNUMBER,PONumber, PODate, ReceivingDate, InvoiceDate,	
	PayDate, PurchasePrice ,  Quantity, Classification 
HAVING  COUNT(*)>1

---CHECK THE DATE RANGE IN THE DATA SET
SELECT MIN(PODATE)AS MINDATE,
		MAX(PODATE) AS MAXDATE
FROM PURCHASE

---CHECK THE DATE RANGE IN THE DATA SET
SELECT MIN(PAYDATE)AS MINDATE,
		MAX(PAYDATE) AS MAXDATE
FROM PURCHASE;

---CHECK THE DATE RANGE IN THE DATA SET
SELECT MIN(invoiceDATE)AS MINDATE,
		MAX(INVOICEDATE) AS MAXDATE
FROM PURCHASE;

----select 
select avg(purchaseprice)
from purchase

----EXPLORE CLSSIFICATION COLUMN
SELECT CLASSIFICATION, COUNT(*)
FROM PURCHASE
group by CLASSIFICATION

IDENTIFYING TOP PERFORMING SUPPLIERS BASED ON PURCAHSED VOLUME , FREQUECNY OF PURCHASE AND AMOUNT SPENT
SELECT  V.VENDORNAME,
		V.VENDOREMAIL,
		SUM(P.QUANTITY * P.PURCHASEPRICE) AS AMOUNT_SPENT,
		SUM(P.QUANTITY) AS PURCHASE_VOLUME,
		COUNT(DISTINCT P.PONUMBER) AS PURCHASE_FREQUENCY
FROM VENDORS AS V
INNER JOIN PURCHASE AS P
ON V.VENDORNUMBER = P.VENDORNUMBER
GROUP BY V.VENDORNAME, V.VENDOREMAIL
ORDER BY AMOUNT_SPENT DESC, PURCHASE_VOLUME DESC, PURCHASE_FREQUENCY DESC;


SELECT  V.VENDORNAME,
		V.VENDOREMAIL,
		SUM(P.QUANTITY * P.PURCHASEPRICE) AS AMOUNT_SPENT,
		SUM(P.QUANTITY) AS PURCHASE_VOLUME,
		COUNT(DISTINCT P.PONUMBER) AS PURCHASE_FREQUENCY
FROM VENDORS AS V
INNER JOIN PURCHASE AS P
ON V.VENDORNUMBER = P.VENDORNUMBER
GROUP BY V.VENDORNAME, V.VENDOREMAIL
HAVING SUM (P.QUANTITY * P.PURCHASEPRICE) >= 1000000
ORDER BY AMOUNT_SPENT DESC, PURCHASE_VOLUME DESC, PURCHASE_FREQUENCY DESC;

----WHO ARE THE TOP 10 SUPPLIERS OF WINE? 2 REP WINE
SELECT V.VENDORNAME,
		V.VENDOREMAIL,
		SUM(P.QUANTITY) AS QUANTITY_PURCHASED
FROM VENDORS AS V
INNER JOIN PURCHASE AS P
ON V.VENDORNUMBER = P.VENDORNUMBER
WHERE P.CLASSIFICATION = 2
GROUP BY V.VENDORNAME, V.VENDOREMAIL
ORDER BY QUANTITY_PURCHASED DESC
LIMIT 10;


----WHO ARE THE TOP 10 SUPPLIERS OF SPIRIT? 1 REP SPIRIT
SELECT V.VENDORNAME,
		V.VENDOREMAIL,
		SUM(P.QUANTITY) AS QUANTITY_PURCHASED
FROM VENDORS AS V
INNER JOIN PURCHASE AS P
ON V.VENDORNUMBER = P.VENDORNUMBER
WHERE P.CLASSIFICATION = 1
GROUP BY V.VENDORNAME, V.VENDOREMAIL
ORDER BY QUANTITY_PURCHASED DESC
LIMIT 10;


---SELECT TOP VENDORS THAT DELIVERS ABOVE THE  LEAD TIME (DAYS TO SHIP)
SELECT V.VENDORNAME,
		V.VENDOREMAIL,
		ROUND(AVG(P.RECEIVINGDATE- PODATE),2) AVGLEADTIME,
		CASE
			WHEN P.CLASSIFICATION = 1 THEN 'SPIRIT'
			ELSE 'WINE'
			END AS CATEGORY
FROM VENDORS AS V
INNER JOIN PURCHASE AS P
ON V.VENDORNUMBER = P.VENDORNUMBER
GROUP BY V.VENDORNAME, V.VENDOREMAIL, CATEGORY
HAVING AVG(P.RECEIVINGDATE - P.PODATE) >= (SELECT AVG(RECEIVINGDATE - PODATE) AVGLEADTIME
										FROM PURCHASE)
ORDER BY AVGLEADTIME DESC
LIMIT 10;



SELECT AVG(RECEIVINGDATE- PODATE) AVGLEADTIME



--FUNCTION TO RETURN TOP VENDORS
CREATE OR REPLACE FUNCTION GET_TOP_VENDORS(TOTAL_AMOUNT_SPENT NUMERIC=1000000)
RETURNS TABLE(
	VendorName	VARCHAR(100),
	VendorEmail VARCHAR(100),
	amount_spent NUMERIC,
	purchase_volume INT,
	purchase_frequency INT 
)
AS $$
BEGIN
	RETURN QUERY
SELECT  V.VENDORNAME,
		V.VENDOREMAIL,
		SUM(P.QUANTITY * P.PURCHASEPRICE) AS AMOUNT_SPENT,
		SUM(P.QUANTITY):: INT  AS PURCHASE_VOLUME,
		COUNT(DISTINCT P.PONUMBER):: INT  AS PURCHASE_FREQUENCY
FROM VENDORS AS V
INNER JOIN PURCHASE AS P
ON V.VENDORNUMBER = P.VENDORNUMBER
GROUP BY V.VENDORNAME, V.VENDOREMAIL
HAVING SUM (P.QUANTITY * P.PURCHASEPRICE) >= TOTAL_AMOUNT_SPENT
ORDER BY AMOUNT_SPENT DESC, PURCHASE_VOLUME DESC, PURCHASE_FREQUENCY DESC;
END
$$ LANGUAGE PLPGSQL;

=--- CALL THE FUNCTION
SELECT * FROM GET_TOP_VENDORS(5000000)

-------CREATE FUNCTION TO SELECT TOP VENDORS BY PRODUCT CATEGORY
CREATE OR REPLACE FUNCTION  GET_TOP_VENDORS_PRODUCTS(CATEGORY INT= 2)
RETURNS TABLE(
	VendorName	VARCHAR,
	VendorEmail VARCHAR,
	QUANTITYPURCHASED INT
	 
)
AS $$
BEGIN
	RETURN QUERY
	SELECT V.VENDORNAME,
		V.VENDOREMAIL,
		SUM(P.QUANTITY) :: INT AS QUANTITY_PURCHASED
	FROM VENDORS AS V
	INNER JOIN PURCHASE AS P
	ON V.VENDORNUMBER = P.VENDORNUMBER
	WHERE P.CLASSIFICATION = CATEGORY
	GROUP BY V.VENDORNAME, V.VENDOREMAIL
	ORDER BY QUANTITY_PURCHASED DESC
	LIMIT 10;

END
$$ LANGUAGE PLPGSQL;

----CALL THE FUCNTION
SELECT * FROM GET_TOP_VENDORS_PRODUCTS(1)